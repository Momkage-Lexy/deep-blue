@model Uxcheckmate_Main.Models.Report
@{
    var websiteScreenshot  = TempData["WebsiteScreenshot"] as string;
    var userIsAuthenticated = User.Identity.IsAuthenticated;
}
@*
============================================================================================
                        HEADER (Screenshot, URL, #of issues)
============================================================================================
*@
<!-- Auto-launch Modal -->
@*<div class="modal fade" id="onLoadModal" tabindex="-1" aria-labelledby="onLoadModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content shadow-lg rounded-4">
      <div class="modal-header">
        <h5 class="modal-title" id="onLoadModalLabel">Your AI-Generated Report Summary</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p>We've analyzed your site and generated design suggestions.</p>
        <p id="summary">@Model.Summary</p>
        <p class="mb-0"><strong>Tip:</strong> You can click any issue to expand and learn more.</p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-primary" data-bs-dismiss="modal" id="letsgo">Let’s Go</button>
      </div>
    </div>
  </div>
</div>
*@
<div class="container">
    <div class="row headerRow">
        <div class="col-md-6">
           @* <img id="screenshotImage" src="@websiteScreenshot " alt="Website Screenshot" class="img-fluid" />*@
            <img src="data:image/png;base64,@TempData["WebsiteScreenshot"]"id="screenshotImage" class="img-fluid" alt="Website Screenshot">

        </div>
        <div class="col-md-6">
            @* Display the URL associated with the report *@
            <h1 id="reportHeader">@Model.Url</h1>
            @* Display the total number of issues found *@
            <p id="totalIssues">Total Issues Found: @(@Model.DesignIssues.Count() + @Model.AccessibilityIssues.Count()) </p>
        </div>
    </div>

<br>

<div id="reportContainer">
    <div class="row sortSelectRow">
        <div class="col-md-8"></div>
        <div class="col-md-4 sortSelectCol">
            @* Dropdown for selecting sort order of the issues *@
            <select id="sortSelect" class="form-select mb-4" data-report-id="@Model.Id">
                <option value="category" selected="@(ViewBag.CurrentSort == "category")">Category</option>
                <option value="severity-high-low" selected="@(ViewBag.CurrentSort == "severity-high-low")">Severity (High to Low)</option>
                <option value="severity-low-high" selected="@(ViewBag.CurrentSort == "severity-low-high")">Severity (Low to High)</option>
            </select>
        </div>
    </div>

@*
============================================================================================
                                    Design Issues
============================================================================================
*@
<div class="row designRow position-relative">
    <div class="report-section mb-5">
        <h3 class="section-header mb-4">Design Issues</h3>

        <!-- FULL ROW OVERLAY -->
        <div id="designIssuesOverlay" class="overlay">
            <div class="spinner-grow text-light" role="status"></div>
        </div>

        <!-- ISSUES CONTENT -->
        <div id="designIssuesWrapper">
            <div id="designIssuesContainer">
                @await Html.PartialAsync("_DesignIssuesPartial", Model.DesignIssues)
            </div>
        </div>

    </div>
</div>


<br>

@*
============================================================================================
                                Accessibility Issues
============================================================================================
*@
    <div class="row accessiblityRow">
        <div class="report-section mb-5">
            <h3 class="section-header mb-4">Accessibility Issues</h3>
            <div id="accessibilityIssuesContainer">
                @* Partial view rendering accessibility issues *@
            <div id="accessibilityIssuesContainer">
                @if (Model.AccessibilityIssues == null || !Model.AccessibilityIssues.Any())
                {
                    <div class="alert alert-primary" role="alert">
                        <strong>Way to go! Your site is WCAG-approved and accessible to all.</strong>
                    </div>
                }
                else
                {
                    @await Html.PartialAsync("_AccessibilityIssuesPartial", Model.AccessibilityIssues)
                }
            </div>
        </div>
    </div>
</div>
<br><br><br>

@if (!userIsAuthenticated)
{
    <div class="alert alert-warning mt-4">
        <p><strong>Want to save this report?</strong> Create an account or log in now — we'll automatically link this report to your profile.</p>

        <form method="post" asp-action="StoreReportIdBeforeAuth" asp-controller="Home">
            <input type="hidden" name="reportId" value="@Model.Id" />
            <button type="submit" name="authType" value="register" class="btn btn-outline-primary me-2">Create Account</button>
            <button type="submit" name="authType" value="login" class="btn btn-outline-secondary">Log In</button>
        </form>
    </div>
}

@*
============================================================================================
                                Print PDF
============================================================================================
*@


    <a asp-action="DownloadReport" asp-route-id="@Model.Id" class="btn btn-primary">
        Download PDF Report
    </a>

</div> @* End tag for #reportContainer *@
</div> @*End tag for .container *@
@section Scripts {
    <script src="~/js/reportResults.js"></script>


    <script>
        document.addEventListener("DOMContentLoaded", function () {

            // Define the reportId dynamically from Razor model binding
            const reportId = @Model.Id;

            // Grab the sorting dropdown
            const sortSelect = document.getElementById('sortSelect');
            let currentSortOrder = sortSelect.value; // Initial sort value

            let pollingIntervalId; // Will store the setInterval ID for later clearing

            // Function to poll the server for updated report issues
            async function fetchUpdatedIssues() {
                try {
                    // Fetch updated issues from the server using current sort order
                    const response = await fetch(`${window.location.origin}/Home/GetSortedIssues?id=${reportId}&sortOrder=${currentSortOrder}&t=${Date.now()}`);
                    if (response.ok) {
                        const data = await response.json();

                        // Update the Design and Accessibility issues sections if data is received
                        if (data.designHtml || data.accessibilityHtml) {
                            document.getElementById('designIssuesContainer').innerHTML = data.designHtml;
                            document.getElementById('accessibilityIssuesContainer').innerHTML = data.accessibilityHtml;

                            // Update the total issues counter
                            const totalIssues = document.querySelectorAll('.issue-card').length;
                            document.getElementById('totalIssues').innerHTML = `Total Issues Found: ${totalIssues}`;
                        }

                        // If the backend reports the analysis is completed
                        if (data.status === "Completed") {

                            // Update the Report Summary dynamically
                            const summaryElement = document.getElementById('summary');
                            if (summaryElement) {
                                summaryElement.innerText = data.summary || "No summary available.";
                                summaryElement.classList.add('visible');
                            }

                            // Hide the loading overlay once report is ready
                            const overlay = document.getElementById('designIssuesOverlay');
                            if (overlay) {
                                overlay.classList.add('hidden');
                            }

                            // If no design issues found, show a success alert
                            const designIssuesCount = document.querySelectorAll('#designIssuesContainer .issue-card').length;
                            if (designIssuesCount === 0) {
                                document.getElementById('designIssuesContainer').innerHTML = `
                                    <div class="alert alert-success">
                                        <strong>No UX issues found! Your site looks great.</strong>
                                    </div>
                                `;
                            }

                            // Automatically pop open the summary modal once complete
                            const modalElement = document.getElementById('onLoadModal');
                            if (modalElement) {
                                const modal = new bootstrap.Modal(modalElement);
                                modal.show();
                            }

                            // Stop polling since the report is done
                            clearInterval(pollingIntervalId);
                            console.log("Polling stopped — report analysis completed!");
                        }
                    }
                } catch (error) {
                    console.error("Failed to fetch updated issues:", error);
                }
            }

            // Start polling for report updates every 1 second
            pollingIntervalId = setInterval(fetchUpdatedIssues, 1000);

            // Fetch immediately as well so the user sees something quickly
            fetchUpdatedIssues();

            // When the user changes the sort option, re-fetch immediately
            sortSelect.addEventListener('change', () => {
                currentSortOrder = sortSelect.value;
                fetchUpdatedIssues();
            });
        });
    </script>
}